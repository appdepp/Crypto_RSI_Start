import os
import logging
from dotenv import load_dotenv
from binance.client import Client
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
TELEGRAM_API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Binance
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

# –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
TOP_CRYPTO_PAIRS = [
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT',
    'XRPUSDT', 'DOGEUSDT', 'LUNAUSDT', 'MATICUSDT', 'DOTUSDT'
]

# –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
PERIODS = ['1m', '5m', '15m', '30m', '1h', '6h', '12h', '1d', '3d', '1M']
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
user_data = {}

# –ü–∞—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
DEFAULT_PAIR = 'BTCUSDT'


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RSI.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)  # –¢—É—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: CallbackContext) -> None:
    if update.callback_query:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ —ç—Ç–æ callback –¥–ª—è "–ü–æ–º–æ—â–∏"
        if update.callback_query.data == "help":
            await update.callback_query.message.reply_text(
                "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "2Ô∏è‚É£ –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5m, 1h, 3d –∏ —Ç.–¥.).\n"
                "3Ô∏è‚É£ –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç:\n"
                "   - –¢–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
                "   - 24-—á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤\n"
                "   - –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n"
                "   - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI (Relative Strength Index) –∏ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª\n\n"
                "üìä *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É BTCUSDT –∏ –ø–µ—Ä–∏–æ–¥ 1h. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –±–∏—Ç–∫–æ–∏–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.\n\n"
                "üí° *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n"
                "- RSI –Ω–∏–∂–µ 30 = —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n"
                "- RSI –≤—ã—à–µ 70 = —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n"
                "- RSI –º–µ–∂–¥—É 30 –∏ 70 = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞.\n\n"
                "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                parse_mode="Markdown"
            )
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.message.pin()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
keyboard = [
    [InlineKeyboardButton("üìä –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="top_pairs")],
    [InlineKeyboardButton("üí¨ –ü–æ–º–æ—â—å", callback_data="help")]
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top_pairs
async def top_pairs(update: Update, context: CallbackContext) -> None:
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    for pair in TOP_CRYPTO_PAIRS:
        keyboard.append([InlineKeyboardButton(pair, callback_data=f"pair_{pair}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤, —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    period_buttons = [InlineKeyboardButton(period, callback_data=f"period_{period}") for period in PERIODS]

    # –ú—ã –¥–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    keyboard.append(period_buttons[:5])  # –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
    keyboard.append(period_buttons[5:])  # –í—Ç–æ—Ä–∞—è –ª–∏–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=reply_markup
    )


async def handle_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
    if query.data.startswith("pair_"):
        pair = query.data.replace("pair_", "")
        user_data[user] = user_data.get(user, {})
        user_data[user]['pair'] = pair
        await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É: {pair} üåü")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    elif query.data.startswith("period_"):
        period = query.data.replace("period_", "")
        user_data[user] = user_data.get(user, {})
        user_data[user]['period'] = period
        await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥: {period} ‚è≥")

    # –ï—Å–ª–∏ –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if 'pair' in user_data[user] and 'period' in user_data[user]:
        pair = user_data[user]['pair']
        period = user_data[user]['period']

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Binance
            klines = binance_client.get_klines(symbol=pair, interval=period, limit=100)
            ticker = binance_client.get_ticker(symbol=pair)

            close_prices = [float(kline[4]) for kline in klines]
            rsi = calculate_rsi(close_prices, 14)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            info_message = (
                f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ {pair}:*\n"
                f"üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {ticker['lastPrice']} USD\n"
                f"üìä 24h –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {ticker['quoteVolume']} USD\n"
                f"üìà 24h –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {ticker['priceChangePercent']}%\n\n"
                f"üìâ *RSI ({period}):* {rsi:.2f}\n"
            )

            if rsi < 30:
                info_message += "‚úÖ *–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É!*"
            elif rsi > 70:
                info_message += "‚ùå *–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!*"
            else:
                info_message += "‚öñÔ∏è *RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ.*"

            await query.message.reply_text(info_message, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_data[user]

    await query.answer()


def calculate_rsi(prices, period):
    gains = []
    losses = []

    for i in range(1, len(prices)):
        change = prices[i] - prices[i - 1]
        if change > 0:
            gains.append(change)
            losses.append(0)
        else:
            losses.append(abs(change))
            gains.append(0)

    avg_gain = sum(gains[-period:]) / period
    avg_loss = sum(losses[-period:]) / period

    if avg_loss == 0:
        return 100

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application = Application.builder().token(TELEGRAM_API_TOKEN).build()


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))  # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("help", help_command))  # –ö–æ–º–∞–Ω–¥–∞ /help
    application.add_handler(CallbackQueryHandler(top_pairs, pattern="^top_pairs$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(handle_selection, pattern="^pair_|^period_"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
